"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[8831],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),k=o,m=u["".concat(c,".").concat(k)]||u[k]||d[k]||a;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=k;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},64372:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={},l=void 0,i={unversionedId:"lecture-notes/networks/2023-10-05",id:"lecture-notes/networks/2023-10-05",title:"2023-10-05",description:"Summary",source:"@site/docs/lecture-notes/networks/2023-10-05.md",sourceDirName:"lecture-notes/networks",slug:"/lecture-notes/networks/2023-10-05",permalink:"/oodlib/docs/lecture-notes/networks/2023-10-05",draft:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/lecture-notes/networks/2023-10-05.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2023-09-26",permalink:"/oodlib/docs/lecture-notes/networks/2023-09-26"},next:{title:"2023-10-10",permalink:"/oodlib/docs/lecture-notes/networks/2023-10-10"}},c={},s=[{value:"video buffer",id:"video-buffer",level:2},{value:"Manifest files",id:"manifest-files",level:2},{value:"Socket w/ UDP",id:"socket-w-udp",level:2},{value:"Example app: UDP client",id:"example-app-udp-client",level:3},{value:"Example server : UDP server",id:"example-server--udp-server",level:3},{value:"Socket w/TCP",id:"socket-wtcp",level:2},{value:"Example app : TCP client",id:"example-app--tcp-client",level:3},{value:"Example server :TCP client",id:"example-server-tcp-client",level:3}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Summary"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"keywords"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"TODO"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"HW"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Exercise*")," ")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Next time"),"\nTCP. and more about multiplexing with TCP.")),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"recap"},"Recap"),(0,o.kt)("h2",{id:"video-buffer"},"video buffer"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"currently on Streaming stored video. Chapter 7.2 on 6th ed.")),(0,o.kt)("p",null,"In Video streaming, there's a TCP buffer, and Client buffer.\n#read: analysis on video streaming"),(0,o.kt)("p",null,"#todo : paste image of buffer (with x, Q, R..)\nStartup delay : Q/x sec.\nwhere Q is the minimum byte client needs to start showing.\nx is the transmission rate (byte/ sec)"),(0,o.kt)("p",null,"when R is bigger than x, and depletion rate is faster than x, there will be stopping in playing.\nwhen R is smaller than x, the buffer will be full, and there will be packet drop."),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"video-streaming-contd"},"Video Streaming (Cont'd)"),(0,o.kt)("h2",{id:"manifest-files"},"Manifest files"),(0,o.kt)("p",null,"manifest file provides URLs for different chunks.\nmanifest file is sent first. As the client manages the buffer, it chooses the right chunk needed."),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"socket-programming-w-udp--tcp"},"Socket programming w/ UDP & TCP"),(0,o.kt)("p",null,"Steps (Application layer -> Transport layer)\nthe running application is called a ",(0,o.kt)("strong",{parentName:"p"},"process"),".\nThe process will create a socket with designated port.\nDone. All others are out of hand."),(0,o.kt)("p",null,"TCP will take care of the un-landed packets. (by ACK)\nUDP do not do connection establishment. UDP do not do a handshake.\nIn UDP, sender explicitly attaches destination IP & port to each packet."),(0,o.kt)("h2",{id:"socket-w-udp"},"Socket w/ UDP"),(0,o.kt)("h3",{id:"example-app-udp-client"},"Example app: UDP client"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from socket import *\nserverName = 'hostname'\nserverPort = 12000\nclientSocket=socket(AF_INET,SOCK_DGRAM)\n\nmessage=raw_input(\"input lower case sentance\")\nclientSocket.sendto(message.encode(),(serverName,serverPort)) #encodes string into bytes.\n\nmodifiedMessage, serverAddress = clientSocket.recvfrom(2048) # max byte to be recieved.\nprint modifiedMessage.decode() # utf-8 to string\nclientSocket.clse()\n")),(0,o.kt)("h3",{id:"example-server--udp-server"},"Example server : UDP server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from socket import *\nserverPort = 12000\n\nserverSocket=socket(AF_INET,SOCK_DGRAM)\nserverSocket.bind(("",serverPort))\nprint("The server is ready to receive")\n\nwhile True :\n    message,clientAddress = serverSocket.recvfrom(2048)\n    modifiedMessage - message.decode().upper()\n    serverSocket.sendto(modifiedMessage.encode(),clientAddress)\n')),(0,o.kt)("h2",{id:"socket-wtcp"},"Socket w/TCP"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"when client creates socket: client establishes connection to server TCP",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"difference : the ",(0,o.kt)("inlineCode",{parentName:"li"},"accept()")," function is needed."),(0,o.kt)("li",{parentName:"ul"},"#todo : check the process w/ wireshark."))),(0,o.kt)("li",{parentName:"ul"},"new socket for each client.")),(0,o.kt)("h3",{id:"example-app--tcp-client"},"Example app : TCP client"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from socket import *\nserverName = 'servername'\nserverPort = 12000\nclientSocket = socket(AF_INET, SOCK_STREAM)\nclientSocket.connet((serverName,serverPort))\n\n")),(0,o.kt)("p",null,"#todo : fill out the codes. both server and app."),(0,o.kt)("h3",{id:"example-server-tcp-client"},"Example server :TCP client"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"...\nwhile Ture:\n    connectionSocket, addr = serverSocket.accept()\n\n    sentence = connectionSocet.recv(1024).decode()\n    capitalizedSentence = sentence.upper()\n    connectionSocket.send(capitalizedSentence.encode())\n\n    connectionSocket.close()\n")))}d.isMDXComponent=!0}}]);