"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[1628],{94307:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var s=t(74848),r=t(28453);const o={},i=void 0,c={id:"lecture-notes/networks/2023-10-05",title:"2023-10-05",description:"Summary",source:"@site/docs/lecture-notes/networks/2023-10-05.md",sourceDirName:"lecture-notes/networks",slug:"/lecture-notes/networks/2023-10-05",permalink:"/oodlib/docs/lecture-notes/networks/2023-10-05",draft:!1,unlisted:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/lecture-notes/networks/2023-10-05.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2023-09-26",permalink:"/oodlib/docs/lecture-notes/networks/2023-09-26"},next:{title:"2023-10-10",permalink:"/oodlib/docs/lecture-notes/networks/2023-10-10"}},l={},d=[{value:"video buffer",id:"video-buffer",level:2},{value:"Manifest files",id:"manifest-files",level:2},{value:"Socket w/ UDP",id:"socket-w-udp",level:2},{value:"Example app: UDP client",id:"example-app-udp-client",level:3},{value:"Example server : UDP server",id:"example-server--udp-server",level:3},{value:"Socket w/TCP",id:"socket-wtcp",level:2},{value:"Example app : TCP client",id:"example-app--tcp-client",level:3},{value:"Example server  client",id:"example-server--client",level:3}];function a(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Summary"})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"keywords"})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"TODO"})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"HW"})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Exercise"}),"*"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Next time"}),"\nTCP. and more about multiplexing with TCP."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h1,{id:"recap",children:"Recap"}),"\n",(0,s.jsx)(n.h2,{id:"video-buffer",children:"video buffer"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"currently on Streaming stored video. Chapter 7.2 on 6th ed."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In Video streaming, there's a TCP buffer, and Client buffer.\n#read: analysis on video streaming"}),"\n",(0,s.jsx)(n.p,{children:"#todo : paste image of buffer (with x, Q, R..)\nStartup delay : Q/x sec.\nwhere Q is the minimum byte client needs to start showing.\nx is the transmission rate (byte/ sec)"}),"\n",(0,s.jsx)(n.p,{children:"when R is bigger than x, and depletion rate is faster than x, there will be stopping in playing.\nwhen R is smaller than x, the buffer will be full, and there will be packet drop."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h1,{id:"video-streaming-contd",children:"Video Streaming (Cont'd)"}),"\n",(0,s.jsx)(n.h2,{id:"manifest-files",children:"Manifest files"}),"\n",(0,s.jsx)(n.p,{children:"manifest file provides URLs for different chunks.\nmanifest file is sent first. As the client manages the buffer, it chooses the right chunk needed."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h1,{id:"socket-programming-w-udp--tcp",children:"Socket programming w/ UDP & TCP"}),"\n",(0,s.jsxs)(n.p,{children:["Steps (Application layer -> Transport layer)\nthe running application is called a ",(0,s.jsx)(n.strong,{children:"process"}),".\nThe process will create a socket with designated port.\nDone. All others are out of hand."]}),"\n",(0,s.jsx)(n.p,{children:"TCP will take care of the un-landed packets. (by ACK)\nUDP do not do connection establishment. UDP do not do a handshake.\nIn UDP, sender explicitly attaches destination IP & port to each packet."}),"\n",(0,s.jsx)(n.h2,{id:"socket-w-udp",children:"Socket w/ UDP"}),"\n",(0,s.jsx)(n.h3,{id:"example-app-udp-client",children:"Example app: UDP client"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from socket import *\nserverName = 'hostname'\nserverPort = 12000\nclientSocket=socket(AF_INET,SOCK_DGRAM)\n\nmessage=raw_input(\"input lower case sentance\")\nclientSocket.sendto(message.encode(),(serverName,serverPort)) #encodes string into bytes.\n\nmodifiedMessage, serverAddress = clientSocket.recvfrom(2048) # max byte to be recieved.\nprint modifiedMessage.decode() # utf-8 to string\nclientSocket.clse()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-server--udp-server",children:"Example server : UDP server"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from socket import *\nserverPort = 12000\n\nserverSocket=socket(AF_INET,SOCK_DGRAM)\nserverSocket.bind(("",serverPort))\nprint("The server is ready to receive")\n\nwhile True :\n\tmessage,clientAddress = serverSocket.recvfrom(2048)\n\tmodifiedMessage - message.decode().upper()\n\tserverSocket.sendto(modifiedMessage.encode(),clientAddress)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"socket-wtcp",children:"Socket w/TCP"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["when client creates socket: client establishes connection to server TCP","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["difference : the ",(0,s.jsx)(n.code,{children:"accept()"})," function is needed."]}),"\n",(0,s.jsx)(n.li,{children:"#todo : check the process w/ wireshark."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"new socket for each client."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-app--tcp-client",children:"Example app : TCP client"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from socket import *\nserverName = 'servername'\nserverPort = 12000\nclientSocket = socket(AF_INET, SOCK_STREAM)\nclientSocket.connet((serverName,serverPort))\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"#todo : fill out the codes. both server and app."}),"\n",(0,s.jsxs)(n.h3,{id:"example-server--client",children:["Example server ",":TCP"," client"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"...\nwhile Ture:\n\tconnectionSocket, addr = serverSocket.accept()\n\n\tsentence = connectionSocet.recv(1024).decode()\n\tcapitalizedSentence = sentence.upper()\n\tconnectionSocket.send(capitalizedSentence.encode())\n\n\tconnectionSocket.close()\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(96540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);