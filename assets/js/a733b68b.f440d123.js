"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[5976],{7795:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>c,toc:()=>a});var s=t(74848),r=t(28453);const d={id:new Date("2023-09-20T00:00:00.000Z")},o="Introduction",c={id:"lecture-notes/algorithms/Wed Sep 20 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",title:"Introduction",description:"Summary",source:"@site/docs/lecture-notes/algorithms/2023-09-20.md",sourceDirName:"lecture-notes/algorithms",slug:"/lecture-notes/algorithms/Wed Sep 20 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",permalink:"/oodlib/docs/lecture-notes/algorithms/Wed Sep 20 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",draft:!1,unlisted:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/lecture-notes/algorithms/2023-09-20.md",tags:[],version:"current",frontMatter:{id:"Wed Sep 20 2023 00:00:00 GMT+0000 (Coordinated Universal Time)"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/algorithms/Mon Sep 18 2023 00:00:00 GMT+0000 (Coordinated Universal Time)"},next:{title:"master's theorem",permalink:"/oodlib/docs/lecture-notes/algorithms/Tue Sep 26 2023 00:00:00 GMT+0000 (Coordinated Universal Time)"}},l={},a=[{value:"3. Decreasing Recurrance $T(n)=2*T(n-1)+1$",id:"3-decreasing-recurrance-tn2tn-11",level:2},{value:"Case 1. $a==1;$",id:"case-1-a1",level:3},{value:"Case 2. $a&gt;1$",id:"case-2-a1",level:3},{value:"1. Dividing Recurrence $T(n)=T(n/2)+1$",id:"1-dividing-recurrence-tntn21",level:2},{value:"2. Dividing Recurrence $T(n) = 2T(n/2)+n$",id:"2-dividing-recurrence-tn--2tn2n",level:2}];function u(e){const i={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Summary"})}),"\n"]}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"keywords"})}),"\n"]}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"TODO"})}),"\n"]}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"HW"}),"\n$T(n) = T(n/2) +n$\nuse Substitution\n$T(n) = 8T(n/2) + nlogn$\nAssignment document."]}),"\n"]}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Exercise"}),"*"]}),"\n"]}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Next time"})}),"\n"]}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsx)(i.h1,{id:"recap",children:"Recap"}),"\n",(0,s.jsx)(i.p,{children:"Recursion Tree Method, Substitution,"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:"scrutinize the code"}),"\n",(0,s.jsx)(i.li,{children:"write the recursion formula"}),"\n",(0,s.jsx)(i.li,{children:"do the substitution."}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"How do you reduce the size of the input?\nex. substraction, division, taking a root."}),"\n",(0,s.jsx)(i.p,{children:"shortcut method for recurrence relation."}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsx)(i.h2,{id:"3-decreasing-recurrance-tn2tn-11",children:"3. Decreasing Recurrance $T(n)=2*T(n-1)+1$"}),"\n",(0,s.jsx)(i.p,{children:"example. fibonacci, subset finding problem."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-c",children:"Void Test(int n) {\n\tif(n>0) {\n\t\tstmt;\n\t\tTest(n-1);\n\t\tTest(n-1);\n\t}\n}\n"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"$$\n\\begin{equation*}\nT(n) = \\begin{cases}\n1 & \\quad n=0 \\\\\n2*T(n-1)+1 & \\quad n>0.\n\\end{cases}\n\\end{equation*}\n$$\n"})}),"\n",(0,s.jsxs)(i.p,{children:["Substitution:\n$T(n) = 2",(0,s.jsx)(i.em,{children:"T(n-1)+1$\n$\\quad\\quad=T(n-2)+1$\n$\\quad\\quad=2"}),"T(n-2)+2",(0,s.jsx)(i.em,{children:"1+1$\n$\\quad\\quad=2"}),"T(n-3)+2",(0,s.jsx)(i.em,{children:"2"}),"1+2",(0,s.jsx)(i.em,{children:"1+1$\n$\\quad...$\n$\\quad\\quad=2"}),"T(n-k)+2^",k-1,"+2^",k-2,"+2^",k-3,"+...+2^2+2+1$"]}),"\n",(0,s.jsx)(i.p,{children:"Time complexity of $O(2^n)$."}),"\n",(0,s.jsx)(i.h1,{id:"masters-theorem",children:"Masters Theorem"}),"\n",(0,s.jsxs)(i.p,{children:["$$for ; T(n) = aT(n-b)+f(n)$$\nwhere $a>0,;b>0,; f(n)= O(n^k); \\text",where,"; k>=0$"]}),"\n",(0,s.jsx)(i.h3,{id:"case-1-a1",children:"Case 1. $a==1;$"}),"\n",(0,s.jsx)(i.p,{children:"$$O(f(n)*n)$$\n#todo : fill out examples."}),"\n",(0,s.jsx)(i.h3,{id:"case-2-a1",children:"Case 2. $a>1$"}),"\n",(0,s.jsxs)(i.p,{children:["$$O(n^ka^",n/b,")$$\n#todo : fill out examples."]}),"\n",(0,s.jsx)(i.h1,{id:"dividing-function",children:"Dividing Function"}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsxs)(i.p,{children:["For dividing functions, it is ",(0,s.jsx)(i.strong,{children:"important"})," n should never be zero in base case."]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"base case should not be of input size 0"}),"\nBecause we cannot divide by 0.."]}),"\n",(0,s.jsx)(i.h2,{id:"1-dividing-recurrence-tntn21",children:"1. Dividing Recurrence $T(n)=T(n/2)+1$"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-c",children:"Void Test(int n) {\n\tif (n>1) {\n\t\tstmt;\n\t\tTest($$\n\\begin{equation*}\nT(n) = \\begin{cases}\n1 & \\quad n=0 \\\\\n2*T(n-1)+1 & \\quad n>0.\n\\end{cases}\n\\end{equation*}\n$$n/2);\n\t}\n}\n\n"})}),"\n",(0,s.jsxs)(i.p,{children:["$$\nT(n) = \\begin",cases,"\n1 & \\quad n=1 \\\nT(n/2)+1 & \\quad n>1.\n\\end",cases,"\n$$"]}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"smallest valid"})," input should be $n=1$."]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"How many 1's are added?\n$n=2^k$\n$k=\\log n$\nSo, Time complexity is $\\Theta(\\log n)$"}),"\n",(0,s.jsx)(i.p,{children:"Let's use substitution method this time.\n$T(n) =T(n/2)+1$\n$\\quad\\quad=T(n/2^2)+1+1$\n$\\quad\\quad=T(n/2^3)+1+1+1$\n$\\quad...$\n$\\quad\\quad=T(n/2^k)+k$\n$\\quad\\quad=1+\\log n$"}),"\n",(0,s.jsx)(i.h2,{id:"2-dividing-recurrence-tn--2tn2n",children:"2. Dividing Recurrence $T(n) = 2T(n/2)+n$"}),"\n",(0,s.jsx)(i.p,{children:"#todo : check the picture taken and see the recursive tree method."}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:"draw each steps"}),"\n",(0,s.jsx)(i.li,{children:"find each step's time complexity (A)"}),"\n",(0,s.jsx)(i.li,{children:"find the base condition, and find the layer depth. (B)"}),"\n",(0,s.jsx)(i.li,{children:"time complexity = $A * B$"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"#todo : write about substitution"}),"\n",(0,s.jsx)(i.p,{children:"time complexity is $\\Theta(n\\log n)$"})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>d,x:()=>o});var t=i(96540);const s={},r=t.createContext(s);function d(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:d(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);