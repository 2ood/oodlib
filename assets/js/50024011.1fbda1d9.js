"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[2328],{28028:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var t=i(74848),o=i(28453);const s={id:new Date("2023-10-16T00:00:00.000Z")},r="Introduction",l={id:"lecture-notes/algorithms/Mon Oct 16 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",title:"Introduction",description:"Summary",source:"@site/docs/lecture-notes/algorithms/2023-10-16.md",sourceDirName:"lecture-notes/algorithms",slug:"/lecture-notes/algorithms/Mon Oct 16 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",permalink:"/oodlib/docs/lecture-notes/algorithms/Mon Oct 16 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",draft:!1,unlisted:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/lecture-notes/algorithms/2023-10-16.md",tags:[],version:"current",frontMatter:{id:"Mon Oct 16 2023 00:00:00 GMT+0000 (Coordinated Universal Time)"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/algorithms/2023-10-11"},next:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/algorithms/2023-10-30"}},c={},a=[{value:"0/1 Knapsack Tabulation",id:"01-knapsack-tabulation",level:2},{value:"0/1 Knapsack Recursion",id:"01-knapsack-recursion",level:2},{value:"0/1 Knapsack Memoization",id:"01-knapsack-memoization",level:2},{value:"0/1 Knapsack Recursion to Tabulation",id:"01-knapsack-recursion-to-tabulation",level:2},{value:"1. Recursion (Brute force)",id:"1-recursion-brute-force",level:2},{value:"2. Tabulation",id:"2-tabulation",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Summary"})}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"keywords"})}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"TODO"})}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"HW"})}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Exercise"}),"*"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Next time"})}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h1,{id:"recap",children:"Recap"}),"\n",(0,t.jsx)(n.p,{children:"Knapsack"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"01-knapsack-tabulation",children:"0/1 Knapsack Tabulation"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Fill out the table one by one, fully."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Initialization : first row, first column is zero."}),"\n",(0,t.jsxs)(n.p,{children:["When you need a ",(0,t.jsx)(n.code,{children:"{0,1,0,1, ..}"})," format result, you should do backtracking.\nCompare with the adjacent subproblem results and guess if the item is picked.\nIf the $P(i-1,W) < P(i,W)$ , the $i^",th,"$ element is picked in calculating $P(i,W)$."]}),"\n",(0,t.jsxs)(n.p,{children:["Now consider $P(i-1,W-W_i)$ and do the similar comparison to find if $(i-1)^",th,"$ element is picked."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"reminder"}),"\nRecursion has 3 steps."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"base case (smallest valid input)"}),"\n",(0,t.jsx)(n.li,{children:"hypothesis (of decreasing an input)"}),"\n",(0,t.jsx)(n.li,{children:"Induction"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'Principle of Optimality means that the algorithm gives result of "sequence of decisions" to the optimality. With that result, we can draw a choice diagram.'}),"\n",(0,t.jsx)(n.h2,{id:"01-knapsack-recursion",children:"0/1 Knapsack Recursion"}),"\n",(0,t.jsx)(n.p,{children:"#todo : fill out."}),"\n",(0,t.jsx)(n.h2,{id:"01-knapsack-memoization",children:"0/1 Knapsack Memoization"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Calculate only what you need, and store it for future demands."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Decide the table size.\ninitialize with unreachable value."}),"\n",(0,t.jsx)(n.p,{children:"Check if the subproblem is already computed.\nStore each result in the table, and next time refer it ."}),"\n",(0,t.jsx)(n.h2,{id:"01-knapsack-recursion-to-tabulation",children:"0/1 Knapsack Recursion to Tabulation"}),"\n",(0,t.jsx)(n.p,{children:"Steps ."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"initialization of first row and first column."}),"\n",(0,t.jsx)(n.li,{children:"Fill each row and each column, one by one."}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"time-complexity-of-01-knapsack-problem",children:"Time Complexity of 0/1 Knapsack Problem"}),"\n",(0,t.jsx)(n.h2,{id:"1-recursion-brute-force",children:"1. Recursion (Brute force)"}),"\n",(0,t.jsx)(n.p,{children:"since the sequence follows a pick-or-no-pick decision diagram, $O(2^n)$."}),"\n",(0,t.jsx)(n.p,{children:"#todo : write the recurrence relation."}),"\n",(0,t.jsx)(n.h2,{id:"2-tabulation",children:"2. Tabulation"}),"\n",(0,t.jsx)(n.p,{children:"filling out the full table.\n$O(nW)$ linear time complexity."}),"\n",(0,t.jsx)(n.p,{children:"How do you compare which time complexity is higher, simply take a log."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h1,{id:"unbounded-knapsack",children:"Unbounded Knapsack"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"You can take an item several times."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"How will the choice diagram change?"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"compare weight of the biggest weight and the capacity"}),"\n",(0,t.jsx)(n.li,{children:"For subproblems, you do not decrease the item number."}),"\n",(0,t.jsx)(n.li,{children:"The item number will only decrease if the capacity is smaller than the biggest weight."}),"\n",(0,t.jsx)(n.li,{children:"If you choose to pick the item, you still leave the possibility to pick the item in the subproblem again."}),"\n",(0,t.jsx)(n.li,{children:"It you do not choose to pick the item, you do not pick the item ever again later."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Only one part is changed in the algorithm (from 0/1 algorithm )"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Similar problem : divide the rod."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(96540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);