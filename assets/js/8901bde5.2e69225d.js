"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[9895],{22479:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var i=n(74848),s=n(28453);const o={},r="What is algorithm?",l={id:"lecture-notes/algorithms/2023-08-30",title:"2023-08-30",description:"in Assignments use python sorting packages.",source:"@site/docs/lecture-notes/algorithms/2023-08-30.md",sourceDirName:"lecture-notes/algorithms",slug:"/lecture-notes/algorithms/2023-08-30",permalink:"/oodlib/docs/lecture-notes/algorithms/2023-08-30",draft:!1,unlisted:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/lecture-notes/algorithms/2023-08-30.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"algorithms",permalink:"/oodlib/docs/lecture-notes/algorithms/"},next:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/algorithms/2023-09-04"}},d={},a=[{value:"remark",id:"remark",level:3},{value:"properties",id:"properties",level:3},{value:"What problems does Algorithms solve?",id:"what-problems-does-algorithms-solve",level:3},{value:"What is different from Data structure class?",id:"what-is-different-from-data-structure-class",level:3},{value:"Caution",id:"caution",level:3},{value:"Comparison between Big-O notations",id:"comparison-between-big-o-notations",level:3},{value:"time complexity : $O(n^2)$",id:"time-complexity--on2",level:3},{value:"What is Divide and Conquer?",id:"what-is-divide-and-conquer",level:2},{value:"steps.",id:"steps",level:4},{value:"time complexity : $O(n*log(n))$",id:"time-complexity--onlogn",level:3}];function h(e){const t={blockquote:"blockquote",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"in Assignments use python sorting packages."}),"\n"]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"7 todos left."}),"\n"]}),"\n",(0,i.jsx)(t.h1,{id:"what-is-algorithm",children:"What is algorithm?"}),"\n",(0,i.jsx)(t.p,{children:"Set of computational steps, that transforms input to output."}),"\n",(0,i.jsx)(t.h3,{id:"remark",children:"remark"}),"\n",(0,i.jsxs)(t.p,{children:["There needs input (or not), and output is a ",(0,i.jsx)(t.strong,{children:"must"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"properties",children:"properties"}),"\n",(0,i.jsx)(t.p,{children:"Algorithm needs to be"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"definite: each steps should be meaningful"}),"\n",(0,i.jsx)(t.li,{children:"finite: should be finished at some point."}),"\n",(0,i.jsx)(t.li,{children:"effective : it has to do the task effectively."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"what-problems-does-algorithms-solve",children:"What problems does Algorithms solve?"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"routing algorithms"}),"\n",(0,i.jsx)(t.li,{children:"search engines"}),"\n",(0,i.jsx)(t.li,{children:"public key cryptography"}),"\n",(0,i.jsx)(t.li,{children:"maximizing profit"}),"\n",(0,i.jsx)(t.li,{children:"et cetra"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"what-is-different-from-data-structure-class",children:"What is different from Data structure class?"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"-"}),(0,i.jsx)(t.th,{children:"data structure"}),(0,i.jsx)(t.th,{children:"algorithms"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Definition"}),(0,i.jsx)(t.td,{children:"way to organize data"}),(0,i.jsx)(t.td,{children:"procedure for performing task"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"#todo : difference between data structure and algorithms"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsxs)(t.p,{children:["needs good data structure knowledge in order to build a good algorithms. It will ",(0,i.jsx)(t.strong,{children:"help"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"caution",children:"Caution"}),"\n",(0,i.jsx)(t.p,{children:"Needs data structure knowledge after finals."}),"\n",(0,i.jsx)(t.h1,{id:"algorithms---sorting",children:"Algorithms - Sorting"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"insertion, selection, bubble, shell, merge, heap, quick, quick3"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"algorithms-sorting",src:n(52500).A+"",width:"899",height:"455"})}),"\n",(0,i.jsxs)(t.p,{children:["How do you say one algorithm is better than the other?\n",(0,i.jsx)(t.strong,{children:"The number of primitive operations"})," needed.\nWe express with ",(0,i.jsx)(t.strong,{children:"big-O notation"}),"."]}),"\n",(0,i.jsx)(t.h1,{id:"big-o-notation",children:"Big-O notation"}),"\n",(0,i.jsxs)(t.p,{children:["mathematical notation used to classify algorithms according to ",(0,i.jsx)(t.strong,{children:"how their run time grow as the input size grows"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["ex1. get_first_number function needs 1 operation : constant : ",(0,i.jsx)(t.strong,{children:"O(1)"}),"\nex2. summation function needs n operation : ",(0,i.jsx)(t.strong,{children:"O(n)"}),"\nex3. Sequential search : n operation :  ",(0,i.jsx)(t.strong,{children:"O(n)"}),", linear time complexity\nex4. Binary search(just like we search on dictionary) : log n operation :  ",(0,i.jsx)(t.strong,{children:"O(log n)"}),"\nex5. brute force : ",(0,i.jsx)(t.strong,{children:"O(n!)"}),", worst."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"caution."}),"\nwe can only use binary search only when the input is sorted. In other words, input is sorted beforehand."]}),"\n",(0,i.jsx)(t.p,{children:"memo. runtime complexity, space complexity"}),"\n",(0,i.jsx)(t.h3,{id:"comparison-between-big-o-notations",children:"Comparison between Big-O notations"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Big-O notations",src:n(92703).A+"",width:"768",height:"514"})}),"\n",(0,i.jsx)(t.h1,{id:"insertion-sort",children:"Insertion Sort"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Find a spot and shift."}),"\nfor each unsorted data array, we choose where to ",(0,i.jsx)(t.strong,{children:"insert"})," in the sorted data array."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"this alg. divides data into two parts: sorted and unsorted."}),"\n",(0,i.jsxs)(t.p,{children:["compare with each sorted data ",(0,i.jsx)(t.strong,{children:"backwards"})," (biggest first).\nif the sorted datum is bigger, shift to right.\nelse if the sorted datum is smaller, put the target to the place."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"insertion sort",src:n(46312).A+"",width:"996",height:"767"})}),"\n",(0,i.jsx)(t.p,{children:"#todo : implement pseudocode.\n#todo : implement code."}),"\n",(0,i.jsx)(t.h3,{id:"time-complexity--on2",children:"time complexity : $O(n^2)$"}),"\n",(0,i.jsx)(t.p,{children:"#todo : how to prove?"}),"\n",(0,i.jsx)(t.h1,{id:"merge-sort",children:"Merge Sort"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"divide and conquer"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"what-is-divide-and-conquer",children:"What is Divide and Conquer?"}),"\n",(0,i.jsx)(t.p,{children:"you divide problem into multiple subproblems."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"remark"}),"\nsubproblems should be the similar problem of the bigger one.\ndivide and conquer is ",(0,i.jsx)(t.em,{children:"recursive"})," in nature."]}),"\n",(0,i.jsx)(t.h4,{id:"steps",children:"steps."}),"\n",(0,i.jsxs)(t.p,{children:["Divide : divide problem into smaller subproblems.\nConquer : when the subproblem is small enough, solve in ",(0,i.jsx)(t.em,{children:"straight-forward manner"}),".\nCombine : obtain bigger solution with smaller solutions."]}),"\n",(0,i.jsx)(t.p,{children:"#todo : implement merge sort pseudocode.\n#todo : implement python code."}),"\n",(0,i.jsx)(t.h3,{id:"time-complexity--onlogn",children:"time complexity : $O(n*log(n))$"}),"\n",(0,i.jsx)(t.p,{children:"#todo : how to prove?"})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},52500:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/20230830144603-b2dfbc529082dc2aa29f9d3c1a7f8c69.png"},92703:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/20230830145809-d138f767a47cbc667296e5c9d7c4c069.png"},46312:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/20230830150848-afbbcad3bca9c73d988958158f85ae0e.png"},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var i=n(96540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);