"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[7189],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=l,d=u["".concat(c,".").concat(m)]||u[m]||k[m]||o;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,a=new Array(o);a[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:l,a[1]=i;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},27819:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>k,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(87462),l=(n(67294),n(3905));const o={},a=void 0,i={unversionedId:"lecture-notes/networks/2023-10-10",id:"lecture-notes/networks/2023-10-10",title:"2023-10-10",description:"Summary",source:"@site/docs/lecture-notes/networks/2023-10-10.md",sourceDirName:"lecture-notes/networks",slug:"/lecture-notes/networks/2023-10-10",permalink:"/oodlib/docs/lecture-notes/networks/2023-10-10",draft:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/lecture-notes/networks/2023-10-10.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2023-10-05",permalink:"/oodlib/docs/lecture-notes/networks/2023-10-05"},next:{title:"2023-10-12",permalink:"/oodlib/docs/lecture-notes/networks/2023-10-12"}},c={},s=[{value:"Socket programming",id:"socket-programming",level:2},{value:"difference in TCP &amp; UDP",id:"difference-in-tcp--udp",level:2},{value:"Multiplexing",id:"multiplexing",level:3},{value:"<code>select()</code>",id:"select",level:3},{value:"Example codes: Chat application",id:"example-codes-chat-application",level:2}],p={toc:s},u="wrapper";function k(e){let{components:t,...o}=e;return(0,l.kt)(u,(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Summary"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"keywords"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"TODO"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"HW"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Exercise*")," ")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Next time"))),(0,l.kt)("hr",null),(0,l.kt)("h1",{id:"recap"},"Recap"),(0,l.kt)("h2",{id:"socket-programming"},"Socket programming"),(0,l.kt)("p",null,"Why do we learn this?"),(0,l.kt)("p",null,"If you do not denote the serverPort, it is a loopback, also called localhost. "),(0,l.kt)("p",null,"decode is required to make binary sentences into strings. "),(0,l.kt)("p",null,"Accept will accept the connection requested by client call ",(0,l.kt)("inlineCode",{parentName:"p"},"clientSocket.send()"),"."),(0,l.kt)("h2",{id:"difference-in-tcp--udp"},"difference in TCP & UDP"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"There is connection establishment in TCP. (shown in accept call)")),(0,l.kt)("p",null,"#todo : add System theory practice book, {Programmer's Perspective}\n",(0,l.kt)("img",{src:n(41066).Z,width:"1493",height:"937"})),(0,l.kt)("hr",null),(0,l.kt)("h1",{id:"multiplexing-using-sockets"},"Multiplexing using Sockets"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Let's support multiple clients.\nHow one-process one-server can support multiple clients?")),(0,l.kt)("p",null,"We will focus on..."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"one process"),(0,l.kt)("li",{parentName:"ul"},"sequential manner"),(0,l.kt)("li",{parentName:"ul"},"First-come-first-served manner")),(0,l.kt)("h3",{id:"multiplexing"},"Multiplexing"),(0,l.kt)("p",null,"Many people are sharing a particular media."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"all sockets are files."),(0,l.kt)("h2",{parentName:"blockquote",id:"three-system-calls-for-implementing-multiplexing"},"Three system calls for implementing multiplexing."),(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("inlineCode",{parentName:"p"},"socket()"),",",(0,l.kt)("inlineCode",{parentName:"p"},"accept()"),",",(0,l.kt)("inlineCode",{parentName:"p"},"select()")),(0,l.kt)("h3",{parentName:"blockquote",id:"socket-accept"},(0,l.kt)("inlineCode",{parentName:"h3"},"socket()"),", ",(0,l.kt)("inlineCode",{parentName:"h3"},"accept()"))),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Creating Master Socket ",(0,l.kt)("inlineCode",{parentName:"li"},"Socket()"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"*",(0,l.kt)("inlineCode",{parentName:"li"},"Socket()")," will create and return Master Socket(Master file Descriptor, like a pointer)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"serverSocket = socekt(AF_INET,SOCK_STREAM)"))),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Master Socket is responsible for connection request.",(0,l.kt)("inlineCode",{parentName:"li"},"accept()"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"For each acceptance of request, master socket will create communication socket (Communication file descriptors)."),(0,l.kt)("li",{parentName:"ul"},"*",(0,l.kt)("inlineCode",{parentName:"li"},"serverSocket.accept()")," returns client address(IP+port), and the communication socket"),(0,l.kt)("li",{parentName:"ul"},"If second client requests, Master socket will accept, and create another communication socket. with, ",(0,l.kt)("em",{parentName:"li"},"this")," socket, further communication is made. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"accept()")," is for 3-way handshake.")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Each Communication Socket is responsible for Service request(Further communications).")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Further communication will be handled by each communication socket.")),(0,l.kt)("h3",{id:"select"},(0,l.kt)("inlineCode",{parentName:"h3"},"select()")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a waiting(blocking) system call. "),(0,l.kt)("li",{parentName:"ul"},"for monitoring all client activity."),(0,l.kt)("li",{parentName:"ul"},"monitoring all socket File Descriptor list (Master socket, communication sockets)"),(0,l.kt)("li",{parentName:"ul"},"in the argument, list of sockets are requested."),(0,l.kt)("li",{parentName:"ul"},"monitoring all connection request, service request."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"select()")," unblocks when",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"New connection request arrives"),(0,l.kt)("li",{parentName:"ul"},"New Service request from existing client arrives."))),(0,l.kt)("li",{parentName:"ul"},"will return a particular ",(0,l.kt)("strong",{parentName:"li"},"socket")," that needs an activity.")),(0,l.kt)("h2",{id:"example-codes-chat-application"},"Example codes: Chat application"),(0,l.kt)("p",null,"listen 5 connections\nprepare a list ",(0,l.kt)("inlineCode",{parentName:"p"},"inputs[]")," of socket FDs.\nWhile there is a element in ",(0,l.kt)("inlineCode",{parentName:"p"},"inputs[]"),","),(0,l.kt)("p",null,"if s is server : if s is a master socket"))}k.isMDXComponent=!0},41066:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/20231010131807-bc45e668aad4285cd7ef62a2197718fd.png"}}]);