"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[1181],{88717:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var o=t(74848),s=t(28453);const i={},r="Introduction",l={id:"lecture-notes/algorithms/2023-10-11",title:"Introduction",description:"Summary",source:"@site/docs/lecture-notes/algorithms/2023-10-11.md",sourceDirName:"lecture-notes/algorithms",slug:"/lecture-notes/algorithms/2023-10-11",permalink:"/oodlib/docs/lecture-notes/algorithms/2023-10-11",draft:!1,unlisted:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/lecture-notes/algorithms/2023-10-11.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/algorithms/2023-10-04"},next:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/algorithms/Mon Oct 16 2023 00:00:00 GMT+0000 (Coordinated Universal Time)"}},c={},a=[{value:"DP",id:"dp",level:2},{value:"#1. 0/1 Knapsack problem.",id:"1-01-knapsack-problem",level:2},{value:"Strategy 1) Tabulation",id:"strategy-1-tabulation",level:2},{value:"#2. Unbounded Knapsack",id:"2-unbounded-knapsack",level:2},{value:"#3. Fractional Knapsack",id:"3-fractional-knapsack",level:2}];function d(e){const n={blockquote:"blockquote",h1:"h1",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Summary"})}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"keywords"})}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"TODO"})}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"HW"})}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Exercise"}),"*"]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Next time"})}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h1,{id:"recap",children:"Recap"}),"\n",(0,o.jsx)(n.h2,{id:"dp",children:"DP"}),"\n",(0,o.jsx)(n.p,{children:"Why need? For optimization problems\nHint? overlapping subproblems\ndifference from divide n conquer? divide n conquer problem are disjoint (never-repeated) problems.\nfollows principle of optimality"}),"\n",(0,o.jsx)(n.p,{children:"strategy 1. memoization. We save the function results on arrays.\nstrategy 2. tabulation. Completely remove the recursion."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h1,{id:"knapsack-problem",children:"Knapsack Problem"}),"\n",(0,o.jsx)(n.h2,{id:"1-01-knapsack-problem",children:"#1. 0/1 Knapsack problem."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"similar problems :\nsubset sum\nequal sum partition\ncount of sldfksmd.\n#todo : fill out the list."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Choose or don't choose"}),"\nHow many solutions could be there? $2^n$\nDP should check each and every solution candidate."]}),"\n",(0,o.jsx)(n.p,{children:"DP => Recursion -> memoization -> tabulation"}),"\n",(0,o.jsx)(n.h2,{id:"strategy-1-tabulation",children:"Strategy 1) Tabulation"}),"\n",(0,o.jsxs)(n.p,{children:["what should be the size of the matrix?\nhint is in the problem's numeral condition.\nthe problem picks ",(0,o.jsx)(n.strong,{children:"from"})," n objects, and k is the capacity of the bag.\nSo, the matrix should be $(n+1)*(k+1)$ size. row is the number of candidate items."]}),"\n",(0,o.jsx)(n.p,{children:"Each cell represents for net profit. Each cells are the subproblems.\nex. for 3rd row 5th column, the cell value is the max profit when we pick 3 items in total and capacity is 5."}),"\n",(0,o.jsxs)(n.p,{children:["initialize 0 row 0 column with 0.\n",(0,o.jsx)(n.strong,{children:"Why need 0 row 0 column?"})," we should think of the 0 capacity. ",(0,o.jsx)(n.strong,{children:"base case."})]}),"\n",(0,o.jsx)(n.p,{children:"Tabulation method) for each cell, how do we fill out?"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"for capacity smaller than the heaviest object,\nThe heaviest object cannot be chosen. It is the same problem with the upper row."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"for capacity bigger than the sum of every object,\nwe can take all the items, so the net profit is the sum of all profit."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"for capacity in between,\ncheck if taking the heaviest item $A$ is efficient.\nTo do so, compare $P_A+P(n-1,k-W_A)$ and $P(n-1,k)$"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"2-unbounded-knapsack",children:"#2. Unbounded Knapsack"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"similar problems:\nrod cutting"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"can choose the identical items several times"}),"\nadd multiple occurances of the same object"]}),"\n",(0,o.jsx)(n.h2,{id:"3-fractional-knapsack",children:"#3. Fractional Knapsack"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Suitable for greedy."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"can take the fraction of an object."})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(96540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);