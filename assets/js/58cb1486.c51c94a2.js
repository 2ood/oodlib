"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[8658],{56615:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var o=t(74848),i=t(28453);const s={},r="Introduction",l={id:"lecture-notes/networks/2023-11-28",title:"Introduction",description:"Summary",source:"@site/docs/lecture-notes/networks/2023-11-28.md",sourceDirName:"lecture-notes/networks",slug:"/lecture-notes/networks/2023-11-28",permalink:"/oodlib/docs/lecture-notes/networks/2023-11-28",draft:!1,unlisted:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/lecture-notes/networks/2023-11-28.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/networks/2023-11-21"},next:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/networks/2023-11-30"}},d={},c=[{value:"Bellman-ford equation",id:"bellman-ford-equation",level:2},{value:"1) DV is better in message complexity.",id:"1-dv-is-better-in-message-complexity",level:3},{value:"2) LS is better in Speed of Convergence",id:"2-ls-is-better-in-speed-of-convergence",level:3},{value:"3) LS is better in Robustness",id:"3-ls-is-better-in-robustness",level:3},{value:"Intra-ISP routing -&gt; OSPF",id:"intra-isp-routing---ospf",level:2},{value:"Inter-ISP routing -&gt; BGP",id:"inter-isp-routing---bgp",level:2},{value:"Why do we need to mix-use two types?",id:"why-do-we-need-to-mix-use-two-types",level:2},{value:"Autonomous System.",id:"autonomous-system",level:2},{value:"Broader Gateway Protocol",id:"broader-gateway-protocol",level:2},{value:"eBGP",id:"ebgp",level:4},{value:"iBGP",id:"ibgp",level:4}];function a(e){const n={blockquote:"blockquote",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Summary"})}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"keywords"})}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"TODO"})}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"HW"})}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Exercise"}),"*"]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Next time"})}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h1,{id:"distance-vector",children:"Distance Vector"}),"\n",(0,o.jsx)(n.h2,{id:"bellman-ford-equation",children:"Bellman-ford equation"}),"\n",(0,o.jsx)(n.p,{children:"ask the neighboring router about the minimum cost for reaching to destination.\nadd each told cost to the cost needed to reach that router, and find the minimum."}),"\n",(0,o.jsx)(n.p,{children:"when local link cost is changed, update message it to the neighboring router."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The neighboring router will also recompute."}),"\n",(0,o.jsx)(n.li,{children:"self-stopping."}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Good news travels fast. -> update of the the minimumhappens\nBad news travels slow.  -> count-to-infinity problem happens."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"44 iterations. in example slide 5-44"}),"\n",(0,o.jsx)(n.p,{children:'solution will be a "poisoned reverse"'}),"\n",(0,o.jsx)(n.h1,{id:"comparison-of-ls-and-dv-algorithms",children:"Comparison of LS and DV algorithms"}),"\n",(0,o.jsx)(n.h3,{id:"1-dv-is-better-in-message-complexity",children:"1) DV is better in message complexity."}),"\n",(0,o.jsx)(n.p,{children:"DV: takes big data exchange, but only needs neighbor exchange. self stopping.\nLS : broadcasts the data to every other node in the network. $n*E$ messages sent"}),"\n",(0,o.jsx)(n.h3,{id:"2-ls-is-better-in-speed-of-convergence",children:"2) LS is better in Speed of Convergence"}),"\n",(0,o.jsx)(n.p,{children:"LS : $O(n^2)$ oscilations. calculatable.\nDV : convergence time varies."}),"\n",(0,o.jsx)(n.h3,{id:"3-ls-is-better-in-robustness",children:"3) LS is better in Robustness"}),"\n",(0,o.jsx)(n.p,{children:"LS : advertises incorrect link cost.\nthe issue will be fixed when the node is back."}),"\n",(0,o.jsx)(n.p,{children:"DV : error will propagate through the entire network."}),"\n",(0,o.jsx)(n.p,{children:"So,\nInside network(intra-isp) they use LS\nexchanging with exterior network they use DV."}),"\n",(0,o.jsx)(n.h1,{id:"how-is-this-internet",children:"How is this internet"}),"\n",(0,o.jsx)(n.h2,{id:"intra-isp-routing---ospf",children:"Intra-ISP routing -> OSPF"}),"\n",(0,o.jsx)(n.p,{children:"When Runs in one Autonomous System(AS), or one service provider."}),"\n",(0,o.jsx)(n.h2,{id:"inter-isp-routing---bgp",children:"Inter-ISP routing -> BGP"}),"\n",(0,o.jsx)(n.p,{children:"Broader gateway protocol ( type of DV)\nfor backbone network. inter-AS\nefficient in defining policies."}),"\n",(0,o.jsx)(n.h2,{id:"why-do-we-need-to-mix-use-two-types",children:"Why do we need to mix-use two types?"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["so many destination(IPv4 needs $2^",32,"$ nodes) to make the DV table."]}),"\n",(0,o.jsx)(n.li,{children:"LS need too many exchanges. the network will be conjested by itself."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"autonomous-system",children:"Autonomous System."}),"\n",(0,o.jsx)(n.p,{children:"Intra-AS : within one AS"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"run on same routing algorithm. (OSPF mostly)"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Inter-AS : among ASses."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"gateway routers perform inter-domain routing."}),"\n",(0,o.jsx)(n.li,{children:"The gateway router is the router that has links to the other AS."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"broader-gateway-protocol",children:"Broader Gateway Protocol"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"glue that holds the internet together."}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"ebgp",children:"eBGP"}),"\n",(0,o.jsxs)(n.p,{children:["propagates reachability information to ",(0,o.jsx)(n.strong,{children:"neighboring ASes"})]}),"\n",(0,o.jsx)(n.h4,{id:"ibgp",children:"iBGP"}),"\n",(0,o.jsxs)(n.p,{children:["propagates reachability information to ",(0,o.jsx)(n.strong,{children:"all AS-internal routers"})]}),"\n",(0,o.jsx)(n.p,{children:"gateway routers will run eBGP and iBGP, and internal routers only run iBGP."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(96540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);