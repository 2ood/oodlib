"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[1089],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>k});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var p=n.createContext({}),u=function(e){var t=n.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},c=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=u(o),d=r,k=s["".concat(p,".").concat(d)]||s[d]||m[d]||i;return o?n.createElement(k,a(a({ref:t},c),{},{components:o})):n.createElement(k,a({ref:t},c))}));function k(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:r,a[1]=l;for(var u=2;u<i;u++)a[u]=o[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},82745:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=o(87462),r=(o(67294),o(3905));const i={},a="Introduction",l={unversionedId:"lecture-notes/algorithms/2023-10-04",id:"lecture-notes/algorithms/2023-10-04",title:"Introduction",description:"Summary",source:"@site/docs/lecture-notes/algorithms/2023-10-04.md",sourceDirName:"lecture-notes/algorithms",slug:"/lecture-notes/algorithms/2023-10-04",permalink:"/oodlib/docs/lecture-notes/algorithms/2023-10-04",draft:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/lecture-notes/algorithms/2023-10-04.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/algorithms/2023-09-25"},next:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/algorithms/2023-10-11"}},p={},u=[{value:"Two approach of DP",id:"two-approach-of-dp",level:3},{value:"How do you identify the problem can be solved by DP?",id:"how-do-you-identify-the-problem-can-be-solved-by-dp",level:3},{value:"principle of optimality",id:"principle-of-optimality",level:3},{value:"Divide n Conquer vs. DP",id:"divide-n-conquer-vs-dp",level:3},{value:"Greedy vs. DP",id:"greedy-vs-dp",level:3},{value:"Problem w/ Recursion; Why do we need DP?",id:"problem-w-recursion-why-do-we-need-dp",level:2},{value:"Fibonacci in Memoization",id:"fibonacci-in-memoization",level:2},{value:"Fibonacci in Tabulation",id:"fibonacci-in-tabulation",level:2}],c={toc:u},s="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(s,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction"},"Introduction"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Summary"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"keywords"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"TODO"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"HW"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Exercise*")," ")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Next time"),"\nsolution of Knapsack problem. ")),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:"recap"},"Recap"),(0,r.kt)("p",null,"master's theorem, asymptotic notations, substitutions"),(0,r.kt)("p",null,"what algorithms did we learn?\nlinear search, binary search, all kinds of sorting, "),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:"contents-forward"},"Contents Forward"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DP or Greedy"),(0,r.kt)("li",{parentName:"ul"},"Fibonacci"),(0,r.kt)("li",{parentName:"ul"},"Zero one, unbounded, simple knapsack"),(0,r.kt)("li",{parentName:"ul"},"matrix chain multiplication"),(0,r.kt)("li",{parentName:"ul"},"longest common subsequence"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"write in resursive first, and convert to DP algorithm.")))),(0,r.kt)("h1",{id:"dynamic-programming"},"Dynamic Programming"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"used for solving ",(0,r.kt)("strong",{parentName:"li"},"Optimizing Problem"),"; minimize or maximize sth.\nmemo. optimization can be solved using Greedy and DP. "),(0,r.kt)("li",{parentName:"ul"},"reduces time complexity of prior algorithms."),(0,r.kt)("li",{parentName:"ul"},"should ",(0,r.kt)("strong",{parentName:"li"},"try all possible solutions")," and pick up the best solution.")),(0,r.kt)("h3",{id:"two-approach-of-dp"},"Two approach of DP"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"memoization(Top down)."),(0,r.kt)("li",{parentName:"ul"},"Tabulation (Bottom up).")),(0,r.kt)("h3",{id:"how-do-you-identify-the-problem-can-be-solved-by-dp"},"How do you identify the problem can be solved by DP?"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"}," to implement, the problem should contain ",(0,r.kt)("strong",{parentName:"p"},"overlapping subproblems"),".\nDP follows ",(0,r.kt)("strong",{parentName:"p"},"Principle of Optimality"))),(0,r.kt)("h3",{id:"principle-of-optimality"},"principle of optimality"),(0,r.kt)("p",null,"problems can be solved by taking a sequence of decision."),(0,r.kt)("h3",{id:"divide-n-conquer-vs-dp"},"Divide n Conquer vs. DP"),(0,r.kt)("p",null,"similarity : combine subproblem solution to make final solution\ndifference :\nDivide n Conquer when ",(0,r.kt)("strong",{parentName:"p"},"disjoint")," subproblems,\nthere will be no same call with same input.\nex. merge sort.\nDP when ",(0,r.kt)("strong",{parentName:"p"},"overlapping")," subproblems.\nex. fibonacci."),(0,r.kt)("h3",{id:"greedy-vs-dp"},"Greedy vs. DP"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Greedy sees the local optimum. "),(0,r.kt)("li",{parentName:"ul"},"Greedy do not deal with multiple possible solutions"),(0,r.kt)("li",{parentName:"ul"},"Greedy do not guarantee the correct answer."),(0,r.kt)("li",{parentName:"ul"},"Greedy is faster. "),(0,r.kt)("li",{parentName:"ul"},"Greedy deal with some uncertain assumptions.")),(0,r.kt)("p",null,"#todo : see slide 5. (see image)"),(0,r.kt)("p",null,"memo. Greedy\nGreedy is based on local optimum. step by step, "),(0,r.kt)("h2",{id:"problem-w-recursion-why-do-we-need-dp"},"Problem w/ Recursion; Why do we need DP?"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"stack overflow. ")),(0,r.kt)("h1",{id:"dp1-fibonacci"},"DP#1, Fibonacci."),(0,r.kt)("h2",{id:"fibonacci-in-memoization"},"Fibonacci in Memoization"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"recursive")," approach, top-down approach."),(0,r.kt)("p",null,"Steps."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"initialize an 1D array (with invalid results, like -1)."),(0,r.kt)("li",{parentName:"ol"},"after calling functions, fill the result on array."),(0,r.kt)("li",{parentName:"ol"},"When overlapping functions, refer the array and get the result w/o calculating.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Still recursive.")),(0,r.kt)("h2",{id:"fibonacci-in-tabulation"},"Fibonacci in Tabulation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"iterative")," approach, using loops."),(0,r.kt)("p",null,"Steps."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"make an array."),(0,r.kt)("li",{parentName:"ol"},"iterating from 0 to desitnation, calculate each fibonacci one by one.")),(0,r.kt)("h1",{id:"dp2-1-01-knapsack"},"DP#2-1, 0/1 Knapsack."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"bag with a finite capacity bag.\neach item has weight and price.\nmaximize the contained price of the bag.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Take, or don't take the item.")))}m.isMDXComponent=!0}}]);