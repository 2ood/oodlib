"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[4889],{48045:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});var i=s(74848),c=s(28453);const t={},l=void 0,r={id:"lecture-notes/networks/2023-10-10",title:"2023-10-10",description:"Summary",source:"@site/docs/lecture-notes/networks/2023-10-10.md",sourceDirName:"lecture-notes/networks",slug:"/lecture-notes/networks/2023-10-10",permalink:"/oodlib/docs/lecture-notes/networks/2023-10-10",draft:!1,unlisted:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/lecture-notes/networks/2023-10-10.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2023-10-05",permalink:"/oodlib/docs/lecture-notes/networks/2023-10-05"},next:{title:"2023-10-12",permalink:"/oodlib/docs/lecture-notes/networks/2023-10-12"}},o={},d=[{value:"Socket programming",id:"socket-programming",level:2},{value:"difference in TCP &amp; UDP",id:"difference-in-tcp--udp",level:2},{value:"Multiplexing",id:"multiplexing",level:3},{value:"Three system calls for implementing multiplexing.",id:"three-system-calls-for-implementing-multiplexing",level:2},{value:"<code>socket()</code>, <code>accept()</code>",id:"socket-accept",level:3},{value:"<code>select()</code>",id:"select",level:3},{value:"Example codes: Chat application",id:"example-codes-chat-application",level:2}];function a(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Summary"})}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"keywords"})}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TODO"})}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"HW"})}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Exercise"}),"*"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Next time"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"recap",children:"Recap"}),"\n",(0,i.jsx)(n.h2,{id:"socket-programming",children:"Socket programming"}),"\n",(0,i.jsx)(n.p,{children:"Why do we learn this?"}),"\n",(0,i.jsx)(n.p,{children:"If you do not denote the serverPort, it is a loopback, also called localhost."}),"\n",(0,i.jsx)(n.p,{children:"decode is required to make binary sentences into strings."}),"\n",(0,i.jsxs)(n.p,{children:["Accept will accept the connection requested by client call ",(0,i.jsx)(n.code,{children:"clientSocket.send()"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"difference-in-tcp--udp",children:"difference in TCP & UDP"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There is connection establishment in TCP. (shown in accept call)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["#todo : add System theory practice book, Programmer's Perspective\n",(0,i.jsx)(n.img,{src:s(32003).A+"",width:"1493",height:"937"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"multiplexing-using-sockets",children:"Multiplexing using Sockets"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Let's support multiple clients.\nHow one-process one-server can support multiple clients?"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"We will focus on..."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"one process"}),"\n",(0,i.jsx)(n.li,{children:"sequential manner"}),"\n",(0,i.jsx)(n.li,{children:"First-come-first-served manner"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"multiplexing",children:"Multiplexing"}),"\n",(0,i.jsx)(n.p,{children:"Many people are sharing a particular media."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"all sockets are files."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"three-system-calls-for-implementing-multiplexing",children:"Three system calls for implementing multiplexing."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"socket()"}),",",(0,i.jsx)(n.code,{children:"accept()"}),",",(0,i.jsx)(n.code,{children:"select()"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"socket-accept",children:[(0,i.jsx)(n.code,{children:"socket()"}),", ",(0,i.jsx)(n.code,{children:"accept()"})]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Creating Master Socket ",(0,i.jsx)(n.code,{children:"Socket()"})]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["*",(0,i.jsx)(n.code,{children:"Socket()"})," will create and return Master Socket(Master file Descriptor, like a pointer)."]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"serverSocket = socekt(AF_INET,SOCK_STREAM)"})}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["Master Socket is responsible for connection request.",(0,i.jsx)(n.code,{children:"accept()"})]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"For each acceptance of request, master socket will create communication socket (Communication file descriptors)."}),"\n",(0,i.jsxs)(n.li,{children:["*",(0,i.jsx)(n.code,{children:"serverSocket.accept()"})," returns client address(IP+port), and the communication socket"]}),"\n",(0,i.jsxs)(n.li,{children:["If second client requests, Master socket will accept, and create another communication socket. with, ",(0,i.jsx)(n.em,{children:"this"})," socket, further communication is made."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"accept()"})," is for 3-way handshake."]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Each Communication Socket is responsible for Service request(Further communications)."}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Further communication will be handled by each communication socket."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"select",children:(0,i.jsx)(n.code,{children:"select()"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"a waiting(blocking) system call."}),"\n",(0,i.jsx)(n.li,{children:"for monitoring all client activity."}),"\n",(0,i.jsx)(n.li,{children:"monitoring all socket File Descriptor list (Master socket, communication sockets)"}),"\n",(0,i.jsx)(n.li,{children:"in the argument, list of sockets are requested."}),"\n",(0,i.jsx)(n.li,{children:"monitoring all connection request, service request."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"select()"})," unblocks when","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"New connection request arrives"}),"\n",(0,i.jsx)(n.li,{children:"New Service request from existing client arrives."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["will return a particular ",(0,i.jsx)(n.strong,{children:"socket"})," that needs an activity."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-codes-chat-application",children:"Example codes: Chat application"}),"\n",(0,i.jsxs)(n.p,{children:["listen 5 connections\nprepare a list ",(0,i.jsx)(n.code,{children:"inputs[]"})," of socket FDs.\nWhile there is a element in ",(0,i.jsx)(n.code,{children:"inputs[]"}),","]}),"\n",(0,i.jsx)(n.p,{children:"if s is server : if s is a master socket"})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},32003:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/20231010131807-bc45e668aad4285cd7ef62a2197718fd.png"},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var i=s(96540);const c={},t=i.createContext(c);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);