"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[6223],{87177:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>a,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var r=s(74848),i=s(28453);const t={},o="Introduction",l={id:"lecture-notes/networks/2023-09-12",title:"Introduction",description:"Summary",source:"@site/docs/lecture-notes/networks/2023-09-12.md",sourceDirName:"lecture-notes/networks",slug:"/lecture-notes/networks/2023-09-12",permalink:"/oodlib/docs/lecture-notes/networks/2023-09-12",draft:!1,unlisted:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/lecture-notes/networks/2023-09-12.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/networks/2023-09-07"},next:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/networks/2023-09-14"}},c={},d=[{value:"Client-Server paradigm",id:"client-server-paradigm",level:2},{value:"Peer-to-Peer paradigm",id:"peer-to-peer-paradigm",level:2},{value:"What is a Process?",id:"what-is-a-process",level:2},{value:"Socket",id:"socket",level:2},{value:"How do you identify the socket?",id:"how-do-you-identify-the-socket",level:2},{value:"Protocol defines..",id:"protocol-defines",level:2},{value:"Open Protocols",id:"open-protocols",level:2},{value:"Transport service",id:"transport-service",level:2},{value:"Properties of TCP &amp; UDP",id:"properties-of-tcp--udp",level:2},{value:"Securing TCP",id:"securing-tcp",level:2},{value:"HTTP",id:"http",level:2}];function h(e){const n={blockquote:"blockquote",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Summary"})}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"keywords"}),"\narchitecture, socket, protocols, criteria in choosing protocols, TCP, UDP"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"TODO"})}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"HW"}),"\nWhat is the default port number of HTTPS?"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exercise"}),"*"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Next time"}),"\nHTTP request messages."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"recap",children:"Recap"}),"\n",(0,r.jsx)(n.p,{children:"Application layer"}),"\n",(0,r.jsx)(n.h1,{id:"paradigms-of-network-apps",children:"Paradigms of network apps"}),"\n",(0,r.jsx)(n.h2,{id:"client-server-paradigm",children:"Client-Server paradigm"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Server"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Always on host"}),"\n",(0,r.jsx)(n.li,{children:"permanent IP address"}),"\n",(0,r.jsx)(n.li,{children:"need to think about scaling, security."}),"\n",(0,r.jsx)(n.li,{children:"Could be hosting on standalone, or on data center"}),"\n",(0,r.jsx)(n.li,{children:"Data center hosting is superior in scaling and security."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Clients"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"maybe intermittently connected."}),"\n",(0,r.jsx)(n.li,{children:"could be dynamic IP address. (DHCP)"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DO NOT"})," communicate direct with each other."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Protocols in Client-Server paradigm\n: HTTP, IMAP, FTP"}),"\n",(0,r.jsx)(n.h2,{id:"peer-to-peer-paradigm",children:"Peer-to-Peer paradigm"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Every device is server, and a client."}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"no always-on server."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"peers request service from other peers, provide service in return."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Self scalability"})," : new peers bring new service capacity, along with the demands."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"complex."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"We'll only focus on Client-server paradigms & HTTP."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"process-communicating",children:"Process Communicating"}),"\n",(0,r.jsx)(n.h2,{id:"what-is-a-process",children:"What is a Process?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"program running within a host"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Client process, server process\ninter-process communications : process (hosted in different devices) communicating by exchanging data."}),"\n",(0,r.jsx)(n.h2,{id:"socket",children:"Socket"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Points where two things are connected."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"how-do-you-identify-the-socket",children:"How do you identify the socket?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"IP + Port"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"By IP address (device) + Port (process inside the device)\nex. http servers run on port 80, https servers run on port 443"}),"\n",(0,r.jsx)(n.p,{children:"Analogy. Envelope.\nFamily members share a same home address (IP), and we have a name (port)"}),"\n",(0,r.jsx)(n.p,{children:"UDP socket, TCP socket."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Google didn't like any of the transport layer.\nSo they made QUIC(Quick UDP Internet Connections)"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"A browser (also) runs on a prot number"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"protocol-defines",children:"Protocol defines.."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Types of messages (Res, Req)"}),"\n",(0,r.jsx)(n.li,{children:"message syntax (How fields are delineated)"}),"\n",(0,r.jsx)(n.li,{children:"message semantics (meaning of info)"}),"\n",(0,r.jsx)(n.li,{children:"rules (when and how processes send & respond to messages)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"open-protocols",children:"Open Protocols"}),"\n",(0,r.jsx)(n.p,{children:"defined in RFCs, everyone can read and use\nallows for interoperability\nex, HTTP, SMTP"}),"\n",(0,r.jsx)(n.p,{children:"There also are (not-open) proprietary protocols."}),"\n",(0,r.jsx)(n.h2,{id:"transport-service",children:"Transport service"}),"\n",(0,r.jsxs)(n.p,{children:["What criteria should we care when ",(0,r.jsx)(n.strong,{children:"choosing"})," transport service for an application??"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["data integrity (making sure the files are completely transferred)","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Okay if you can tolerate the data loss (Ex. audio format file)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["timing (low delay)","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Okay if the service is not live-streaming"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["throughput (bandwidth of edge..)","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Okay if service is elastic."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"![[../images/20230912135617.png]]"}),"\n",(0,r.jsx)(n.h2,{id:"properties-of-tcp--udp",children:"Properties of TCP & UDP"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{}),(0,r.jsx)(n.th,{children:"TCP"}),(0,r.jsx)(n.th,{children:"UDP"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"transport reliability"}),(0,r.jsx)(n.td,{children:"Y"}),(0,r.jsx)(n.td,{children:"N"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"flow control"}),(0,r.jsx)(n.td,{children:"Y"}),(0,r.jsx)(n.td,{children:"N"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Conjestion control"}),(0,r.jsx)(n.td,{children:"Y"}),(0,r.jsx)(n.td,{children:"N"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"connection-oriented"})}),(0,r.jsx)(n.td,{children:"Y"}),(0,r.jsx)(n.td,{children:"N"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"TCP Do not provide:\ndepends on the bandwidth. Cannot change throughput by itself.\ntiming, minimum throughput guarantee, security"}),"\n",(0,r.jsx)(n.p,{children:"UDP Do not provide :\nreliability, flow control, congestion, control, timeing, throughput guarantee, security, connection setup.."}),"\n",(0,r.jsx)(n.p,{children:"throughput is not guarantee by any Protocols in this Internet.\nSecurity is not supported by TCP & UDP\nTCP cares about lost packets. UDP doesn't.\nTCP is connection-oriented. We should open and close a connection."}),"\n",(0,r.jsx)(n.p,{children:"Q. Why use UDP?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"UDP is much faster. Header is smaller."})," less overhead."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"![[../images/20230912135815.png]]"}),"\n",(0,r.jsx)(n.h2,{id:"securing-tcp",children:"Securing TCP"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"TCP, UDP has no encryption"}),"\n",(0,r.jsx)(n.li,{children:"cleartext. human-readable."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"We use TLS (Transport Layer Security, Originally called SSL)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"There are TLS libraries you can use in application layer."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"web-http",children:"Web, HTTP"}),"\n",(0,r.jsx)(n.p,{children:'The idea is "Sending meaningful objects through internet"'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"URL : includes information about the target device & what you want"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"http",children:"HTTP"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Hypertext transfer protocol"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"application layer protocol"})}),"\n",(0,r.jsx)(n.li,{children:"browser is the interpreter(of the HTTP packets) + displayer(of the object)."}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"HTTP uses TCP"}),".\n",(0,r.jsx)(n.strong,{children:"HTTP is stateless."})," : state information is implemented by cookies.\n",(0,r.jsx)(n.strong,{children:"HTTP nowadays (HTTP 1.1) are Persistent."})," : 1 connection can be used for multiple objects sending. before closed. You choose how long, how many."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Non-persistent HTTP has high RTT (round trip time)\n#todo : problems of Non-persistent HTTP"})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(96540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);