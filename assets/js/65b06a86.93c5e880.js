"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[3039],{30762:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var i=t(74848),s=t(28453);const o={},r="Introduction",l={id:"lecture-notes/algorithms/2023-11-22",title:"Introduction",description:"Summary",source:"@site/docs/lecture-notes/algorithms/2023-11-22.md",sourceDirName:"lecture-notes/algorithms",slug:"/lecture-notes/algorithms/2023-11-22",permalink:"/oodlib/docs/lecture-notes/algorithms/2023-11-22",draft:!1,unlisted:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/lecture-notes/algorithms/2023-11-22.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/algorithms/Wed Nov 15 2023 00:00:00 GMT+0000 (Coordinated Universal Time)"},next:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/algorithms/Mon Nov 27 2023 00:00:00 GMT+0000 (Coordinated Universal Time)"}},c={},a=[{value:"Fractional Knapsack Problem",id:"fractional-knapsack-problem",level:2},{value:"Scheduling unit-time tasks with deadlines",id:"scheduling-unit-time-tasks-with-deadlines",level:2},{value:"Optimal Merge Pattern",id:"optimal-merge-pattern",level:2},{value:"Huffman Coding.",id:"huffman-coding",level:2}];function d(e){const n={blockquote:"blockquote",em:"em",h1:"h1",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Summary"})}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"keywords"})}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TODO"})}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"HW"})}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Exercise"}),"*"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Next time"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"greedy",children:"Greedy"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Used when step by step choosing the local optimum reaches the global optimum"}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It will need an appropriate data structure"}),"\n",(0,i.jsx)(n.li,{children:"graph algorithms are also by nature, a greedy algorithm"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"fractional-knapsack-problem",children:"Fractional Knapsack Problem"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"maximize the profit with fraction-able objects."}),"\n",(0,i.jsx)(n.li,{children:"no need of DP. The only idea you need is as follows."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"highest $profit/weight$"}),"\n",(0,i.jsx)(n.p,{children:"take the maximum prof/weight object as many as possible, and take the next maximum prof/weight object as many as possible."}),"\n",(0,i.jsx)(n.p,{children:"Create a heap with the prof/weight ratio.\nWhy not sorting? the smaller things we do not use."}),"\n",(0,i.jsx)(n.p,{children:"make a key to track back the object from the ratio..?"}),"\n",(0,i.jsx)(n.h2,{id:"scheduling-unit-time-tasks-with-deadlines",children:"Scheduling unit-time tasks with deadlines"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Select the highest earning first."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Create a heap with the earning.\nFor each day, pick the next highest earning. Check it the deadlines meet the time slot."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"DO not iterate from the first time slot."}),"\nPut the task in the time slot closest to the deadline."]}),"\n",(0,i.jsx)(n.h2,{id:"optimal-merge-pattern",children:"Optimal Merge Pattern"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"This will be used in Huffman Coding.\nsimilar to Rope connecting problem"}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the cost of merging depends on the sizes of items."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"merge small things first"}),". This strategy leads to the smallest cost."]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"for every iteration, double check if the sum of smallest items lead to the smallest item."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"huffman-coding",children:"Huffman Coding."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"compression technique."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Say we want to send 20-character string."}),"\n",(0,i.jsxs)(n.ol,{start:"0",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"No encoding\nWithout encoding, it takes 8 bits per character. 160 bits in total."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Fixed size coding.\nmake an optimal encoding map($8",(0,i.jsx)(n.em,{children:"5+3"}),"5$), and send the map along with the data($3*20$)?\nsmaller(115 bits) than no encoding(160 bits), but \ubc30\ubcf4\ub2e4 \ubc30\uaf3d\uc774 \ub354 \ucee4."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"variable size coding."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);