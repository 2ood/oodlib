"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[9504],{36673:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>a,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var t=i(74848),o=i(28453);const s={},r="Introduction",l={id:"lecture-notes/algorithms/2023-09-04",title:"Introduction",description:"Summary",source:"@site/docs/lecture-notes/algorithms/2023-09-04.md",sourceDirName:"lecture-notes/algorithms",slug:"/lecture-notes/algorithms/2023-09-04",permalink:"/oodlib/docs/lecture-notes/algorithms/2023-09-04",draft:!1,unlisted:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/lecture-notes/algorithms/2023-09-04.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2023-08-30",permalink:"/oodlib/docs/lecture-notes/algorithms/2023-08-30"},next:{title:"Introduction",permalink:"/oodlib/docs/lecture-notes/algorithms/2023-09-06"}},c={},d=[{value:"steps.",id:"steps",level:2},{value:"Big-O analysis of merge sort",id:"big-o-analysis-of-merge-sort",level:3},{value:"steps.",id:"steps-1",level:2},{value:"Time complexity of selection sort.",id:"time-complexity-of-selection-sort",level:3},{value:"steps.",id:"steps-2",level:2},{value:"Time complexity of Quick sort.",id:"time-complexity-of-quick-sort",level:3}];function h(e){const n={blockquote:"blockquote",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Summary"}),"\nintroductions of several sorting algorithms and how they work"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"keywords"}),"\ndivide and conquer, merge sort, quick sort."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"TODO"}),"\n#todo : dividing logic pseudocode\n#todo : combining logic pseudocode\n#todo: look for the space complexity of merge sort"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"HW"})}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Exercise"}),"\ndraw the steps of sorting."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Next time"})}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"divide-and-conquer--recap",children:"Divide and Conquer : recap"}),"\n",(0,t.jsx)(n.p,{children:"Divide, Conquer, combine"}),"\n",(0,t.jsx)(n.h1,{id:"merge-sort",children:"Merge sort"}),"\n",(0,t.jsx)(n.h2,{id:"steps",children:"steps."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Divide input array into two parts (usually in half)"}),"\n",(0,t.jsx)(n.li,{children:"merge sort right one."}),"\n",(0,t.jsx)(n.li,{children:"merge sort left one."}),"\n",(0,t.jsx)(n.li,{children:"combine right and left ones."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Input : Array and indices p,q,r\n#todo 1: dividing logic pseudocode\n#todo 2: combining logic pseudocode\n#todo 3: look for the space complexity of merge sort"}),"\n",(0,t.jsx)(n.h3,{id:"big-o-analysis-of-merge-sort",children:"Big-O analysis of merge sort"}),"\n",(0,t.jsx)(n.p,{children:"On each depth, it needs $n$ times to combine.\nThe number of depth is $log(n)$\nso, the time complexity is $nlog(n)$"}),"\n",(0,t.jsx)(n.p,{children:"#todo 4: worst case data of merge sort."}),"\n",(0,t.jsx)(n.h1,{id:"selection-sort",children:"Selection Sort"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Set the first element as minimum."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"steps-1",children:"steps."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"traverse through all array and find the minimum element."}),"\n",(0,t.jsx)(n.li,{children:"When found, swap with the first position."}),"\n",(0,t.jsx)(n.li,{children:"Next is minimum for second position."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"#todo 5: pseudocode for selection sort."}),"\n",(0,t.jsx)(n.h3,{id:"time-complexity-of-selection-sort",children:"Time complexity of selection sort."}),"\n",(0,t.jsx)(n.p,{children:"On each round, it needs $n$ times to find a minimum.\nthere are $n$ rounds.\nso, the time complexity is $O(n^2)$."}),"\n",(0,t.jsx)(n.p,{children:"#todo 6: worst case data of selection sort."}),"\n",(0,t.jsx)(n.h1,{id:"quick-sort",children:"Quick Sort"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"find the right sorted pivot to divide.\nswap each side's anomaly until two iteration overlap."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"divide and conquer"}),"\n",(0,t.jsx)(n.h2,{id:"steps-2",children:"steps."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["partition","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"find a pivot position."}),"\n",(0,t.jsx)(n.li,{children:"put smaller element on the left, put bigger element on the right."}),"\n",(0,t.jsx)(n.li,{children:"sort each part."}),"\n",(0,t.jsx)(n.li,{children:"put the pivot target in between."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"quick sort each partition."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"caution."}),"\nThere are a lot of variations of implementing quick sort."]}),"\n",(0,t.jsx)(n.p,{children:"pseudocode"}),"\n",(0,t.jsx)(n.p,{children:"5 2 4 7 1 3 2 6  \uc774 \uc788\ub2e4.\n5\ub97c pivot \uc73c\ub85c \uc124\uc815\ud55c\ub2e4.\n\uc88c\uce21\ubd80\ud130 5\ubcf4\ub2e4 \uc791\uc740\uc9c0 \ubcf8\ub2e4.\n7\uc740 5\ubcf4\ub2e4 \ud06c\ub2e4. \uba48\ucd98\ub2e4.\n\uc6b0\uce21\ubd80\ud130 5\ubcf4\ub2e4 \ud070\uc9c0 \ubcf8\ub2e4.\n2\ub294 5\ubcf4\ub2e4 \uc791\ub2e4. \uba48\ucd98\ub2e4.\n7\uacfc 2\ub97c \ubc14\uafbc\ub2e4."}),"\n",(0,t.jsx)(n.p,{children:"\uc88c\uce21 \uc774\ub3d9\uc744 \ub2e4\uc2dc \uc2dc\uc791\ud55c\ub2e4.\n...\n\uc88c\uce21 iteration \uacfc \uc6b0\uce21 iteration\uc774 \uacb9\uce60\ub54c\uae4c\uc9c0 \ud55c\ub2e4.\n\ub450 iteration\uc774 \uc9c0\ub098\uac00\uba74 \uc6b0\ub9ac pivot \uacfc \ubc14\uafbc\ub2e4?"}),"\n",(0,t.jsx)(n.p,{children:"#todo 7 : pseudocode of quick sort."}),"\n",(0,t.jsx)(n.h3,{id:"time-complexity-of-quick-sort",children:"Time complexity of Quick sort."}),"\n",(0,t.jsx)(n.p,{children:"Best case : $O(nlog(n))$"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"best case happens when partition happens at the right middle."}),"\n",(0,t.jsx)(n.li,{children:"(pivot element is a median of the list)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Worst case : $O(n^2)$"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"worst case happens when data is already sorted."}),"\n",(0,t.jsx)(n.li,{children:"it should check n times for all n data.\n#todo 8: worst case data of quick sort."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"#todo 9: protocol to find what is the best suitable sorting algorithms.\n#todo 10: checklist of checking the sorting algorithm is seamless."}),"\n",(0,t.jsx)(n.p,{children:"ways to avoid the worst case of quick sort"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Dont' talways select the pivot as first element."}),"\n",(0,t.jsx)(n.li,{children:"..."}),"\n",(0,t.jsx)(n.li,{children:"#todo 11: write more."}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(96540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);