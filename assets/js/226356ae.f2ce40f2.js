"use strict";(self.webpackChunk_2_oodlib=self.webpackChunk_2_oodlib||[]).push([[4628],{3905:(e,r,t)=>{t.d(r,{Zo:()=>m,kt:()=>f});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=n.createContext({}),l=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},m=function(e){var r=l(e.components);return n.createElement(p.Provider,{value:r},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=l(t),d=a,f=u["".concat(p,".").concat(d)]||u[d]||c[d]||s;return t?n.createElement(f,o(o({ref:r},m),{},{components:t})):n.createElement(f,o({ref:r},m))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},966:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=t(7462),a=(t(7294),t(3905));const s={},o="6. Class based Views",i={unversionedId:"programming/django-rest-framework/class-based-views",id:"programming/django-rest-framework/class-based-views",title:"6. Class based Views",description:"0. Overview",source:"@site/docs/programming/django-rest-framework/6-class-based-views.md",sourceDirName:"programming/django-rest-framework",slug:"/programming/django-rest-framework/class-based-views",permalink:"/oodlib/docs/programming/django-rest-framework/class-based-views",draft:!1,editUrl:"https://github.com/2ood/oodlib/blob/master/docs/programming/django-rest-framework/6-class-based-views.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"5. Request and Response",permalink:"/oodlib/docs/programming/django-rest-framework/request-and-response"},next:{title:"Docu. MDX features",permalink:"/oodlib/docs/programming/docusaurus-mdx-features"}},p={},l=[{value:"0. Overview",id:"0-overview",level:2},{value:"1. <code>APIView</code>",id:"1-apiview",level:2}],m={toc:l},u="wrapper";function c(e){let{components:r,...t}=e;return(0,a.kt)(u,(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"6-class-based-views"},"6. Class based Views"),(0,a.kt)("h2",{id:"0-overview"},"0. Overview"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"APIView"),"\ub97c \uc0ac\uc6a9\ud574\uc11c \uac01 API\ub97c \ud074\ub798\uc2a4 \ud615\uc2dd\uc73c\ub85c \uc791\uc131\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6b4\ub2e4. ")),(0,a.kt)("h2",{id:"1-apiview"},"1. ",(0,a.kt)("inlineCode",{parentName:"h2"},"APIView")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"APIView"),"\ub77c\ub294 \ud074\ub798\uc2a4\ub294 ",(0,a.kt)("inlineCode",{parentName:"p"},"rest_framework.views")," \uc5d0\uc11c import \ud574\uc62c \uc218 \uc788\ub2e4.\n\uc774\ub97c extend \ud558\uba74 \uac01\uac01\uc758 \uba54\uc11c\ub4dc\ub97c \ud568\uc218\ub85c \uc791\uc131\ud560 \uc218 \uc788\ub2e4. "),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"views.py")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'from snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom django.http import Http404\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\n\nclass SnippetList(APIView):\n    """\n    List all snippets, or create a new snippet.\n    """\n    def get(self, request, format=None):\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return Response(serializer.data)\n\n    def post(self, request, format=None):\n        serializer = SnippetSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"urls.py")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"from django.urls import path\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\nurlpatterns = [\n    path('snippets/', views.SnippetList.as_view()),\n]\n\nurlpatterns = format_suffix_patterns(urlpatterns)\n")))}c.isMDXComponent=!0}}]);